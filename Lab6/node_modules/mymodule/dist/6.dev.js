"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.task4 = task4;
exports.task5 = task5;
exports.start = start;
exports.next = next;
exports.add = add;
exports.onbuttonadd = onbuttonadd;
exports.piechat = piechat;
exports.dayforbirthday = dayforbirthday;

require("https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js");

require("https://cdn.jsdelivr.net/lodash/4.10.0/lodash.js");

var resarray = [];
var result = [];
var arrayfromrand = [];

function course() {
  var ar = ["Mathematics", "Physics", "English", "Computer Science", "Dancing", "Chess", "Biology", "Chemistry", "Law", "Art", "Medicine", "Statistics"]; //a=0 b=11

  var im = Math.floor(Math.random() * (11 - 0 + 1)) + 0;
  return ar[im];
}

function addone(res) {
  arrayfromrand.push(res);
}

function task1(kol) {
  var i, results, array1, array3, _i, a, b, _i2, array_result, _i3, j;

  return regeneratorRuntime.async(function task1$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i < kol)) {
            _context.next = 8;
            break;
          }

          _context.next = 4;
          return regeneratorRuntime.awrap(fetch('https://randomuser.me/api').then(function (response) {
            return response.json();
          }).then(function (json) {
            return addone(json);
          }));

        case 4:
          results = _context.sent;

        case 5:
          i++;
          _context.next = 1;
          break;

        case 8:
          array1 = arrayfromrand; //Array.from(name.randomUserMock);

          array3 = [];

          for (_i = 0; _i < array1.length; _i++) {
            a = array1[_i].results[0];
            b = {};
            b.gender = a.gender;
            b["title"] = a.name.title;
            b.full_name = a.name.first + " " + a.name.last;
            b.city = a.location.city;
            b.state = a.location.state;
            b.country = a.location.country;
            b.postcode = a.location.postcode;
            b.coordinates = a.location.coordinates;
            b.timezone = a.location.timezone;
            b.email = a.email;
            b.b_date = a.dob.date;
            b.age = a.dob.age;
            b.phone = a.phone;
            b.picture_large = a.picture.large;
            b.picture_thumbnail = a.picture.thumbnail;
            b.id = a.id.name + a.id.value;
            array3[_i] = b;
          }

          for (_i2 = 0; _i2 < array3.length; _i2++) {
            array3[_i2].favorite = false;
            array3[_i2].course = null; //course();

            array3[_i2].bg_color = "#dface7";
            array3[_i2].note = "Note";
          }

          array_result = array3;

          for (_i3 = 0; _i3 < array_result.length; _i3++) {
            for (j = _i3 + 1; j < array_result.length; j++) {
              if (array_result[_i3].full_name == array_result[j].full_name) {
                array_result.splice(j, 1);
              }
            }

            if (array_result[_i3].course == null) {
              array_result[_i3].course = course();
            }

            resarray.push(array_result[_i3]);
          } //resarray=array_result;


        case 14:
        case "end":
          return _context.stop();
      }
    }
  });
}

function check(a, por) {
  if (por == 1) {
    if (a == undefined) return false;
    if (a == null) return false;
    if (typeof a != "string") return false;
    if (a.substring(0, 1) == a.substring(0, 1).toUpperCase()) return true;
  }

  if (por == 2) {
    if (a == undefined) return false;
    if (a == null) return false;
    if (typeof a != "string") return false;
    return true;
  }

  if (por == 3) {
    if (a == undefined) return false;
    if (a == null) return false;
    if (typeof a != "number") return false;
    return true;
  }

  if (por == 4) {
    if (a == undefined) return false;
    if (a == null) return false;
    if (typeof a != "string") return false;
    var exp = /@/;
    return exp.test(a);
  }
}

function task2() {
  var ar = resarray;

  for (var i = 0; i < ar.length; i++) {
    var a = ar[i].full_name;
    var b = ar[i].state;
    var c = ar[i].city;
    var d = ar[i].country;
    var e = ar[i].note;
    var f = ar[i].gender;
    var g = ar[i].age;
    var m = ar[i].email;
    var _result = false;

    if (check(a, 1) && check(b, 1) && check(c, 1) && check(d, 1) && check(e, 1) && check(f, 2) && check(g, 3) && check(m, 4)) {
      _result = true;
    }

    ar[i].check = _result;
  }
}
/*

function task3(ar,p_country, p_age, p_gender,p_favorite)
{  let res=ar.slice ();
   if(p_country!=null && p_country!=undefined) {const res1 = res.filter (country => country.country==p_country);
      res=res1;}
   if(p_age!=null && p_age!=undefined) {const res1 = res.filter (country => country.age==p_age);
         res=res1;}
   if(p_gender!=null && p_gender!=undefined) {const res1 = res.filter (country => country.gender==p_gender);
            res=res1;}
   if(p_favorite!=null && p_favorite!=undefined) {const res1 = res.filter (country => country.favorite==p_favorite);
               res=res1;} 
   return (res);
}

function task31(ar,p_country, p_age, p_gender,p_favorite)
{  let res=ar.slice ();
   const res1 = res.filter (ob => ob.country==p_country && ob.age==p_age && ob.gender==p_gender && ob.favorite==p_favorite);        
   return (res1);
}
*/


function task4(field) {
  //let ar=resarray;
  //let sort="abc";
  resarray = _.sortBy(resarray, function (item) {
    if (field == 0) {
      return item.full_name.toLowerCase();
    } else if (field == 1) {
      return item.course.toLowerCase();
    } else if (field == 2) {
      return item.age;
    } else if (field == 3) {
      return item.gender.toLowerCase();
    } else if (field == 4) {
      return item.country.toLowerCase();
    }
  });
  /*
     if (field==0){ if (sort=="abc"){return ar.sort((a, b) => {
        let fa = a.full_name.toLowerCase(),
            fb = b.full_name.toLowerCase();
    
        if (fa < fb) {
            return -1;
        }
        if (fa > fb) {
            return 1;
        }
        return 0;
    });}
     else {return ar.sort((a, b) => {
        let fa = a.full_name.toLowerCase(),
            fb = b.full_name.toLowerCase();
    
        if (fa < fb) {
            return 1;
        }
        if (fa > fb) {
            return -1;
        }
        return 0;
    });}
    }
  
    if (field==1){ if (sort=="abc"){return ar.sort((a, b) => {
     let fa = a.course.toLowerCase(),
         fb = b.course.toLowerCase();
  
     if (fa < fb) {
         return -1;
     }
     if (fa > fb) {
         return 1;
     }
     return 0;
  });}
  else {return ar.sort((a, b) => {
     let fa = a.full_name.toLowerCase(),
         fb = b.full_name.toLowerCase();
  
     if (fa < fb) {
         return 1;
     }
     if (fa > fb) {
         return -1;
     }
     return 0;
  });}
  }
  
  
  
     if (field==3){ if (sort=="abc"){return ar.sort((a, b) => {
        let fa = a.gender.toLowerCase(),
            fb = b.gender.toLowerCase();
    
        if (fa < fb) {
            return -1;
        }
        if (fa > fb) {
            return 1;
        }
        return 0;
    });}
     else {return ar.sort((a, b) => {
        let fa = a.full_name.toLowerCase(),
            fb = b.full_name.toLowerCase();
    
        if (fa < fb) {
            return 1;
        }
        if (fa > fb) {
            return -1;
        }
        return 0;
    });}
    }
  
     if (field==2){ if (sort=="abc"){return ar.sort((ob1,ob2)=>ob1.age-ob2.age);}
                        else {return ar.sort((ob1,ob2)=>ob2.age-ob1.age);}
                    }
  
     if (field==4){ if (sort=="abc"){return ar.sort((a, b) => {
                       let fa = a.country.toLowerCase(),
                           fb = b.country.toLowerCase();
                   
                       if (fa < fb) {
                           return -1;
                       }
                       if (fa > fb) {
                           return 1;
                       }
                       return 0;
                   });}
                    else {return ar.sort((a, b) => {
                       let fa = a.full_name.toLowerCase(),
                           fb = b.full_name.toLowerCase();
                   
                       if (fa < fb) {
                           return 1;
                       }
                       if (fa > fb) {
                           return -1;
                       }
                       return 0;
                   });}
                 }
     if (field==-1){ if (sort=="abc"){ return ar.sort((a, b) => {
                    let da = new Date(a.b_date),db = new Date(b.b_date);
                    return da - db;
                            });}
                          else {return ar.sort((a, b) => {
                                   let da = new Date(a.b_date),db = new Date(b.b_date);
                                   return db - da;
                            });}
  
     }
   */
}

function task5(value) {
  task8();
  var ar = result; ///if (field=="note")

  console.log(value);

  var ob1 = _.find(ar, function (ob) {
    return ob.note == value || ob.age == value || ob.full_name == value;
  });
  /*
  let ob1=ar.filter (a=>a.note==value);
  //if (field=="age")
  let ob2=ar.filter (a=>a.age==value);
  
     let ob3=ar.filter (a=>a.full_name==value);
  
   if (ob1!=undefined){ob1=ob1.concat(ob2);}
  else {ob1=ob2;}
  
  if (ob1!=undefined){ob1=ob1.concat(ob3);console.log("B");}
  else {ob1=ob3;console.log("A");}
  */


  result = [];
  result.push(ob1);
  task7();
}
/*
function task6(ar,where,p_age)
{

   let res=ar.slice ();
   if (where=="="){const res1 = res.filter (country => country.age==p_age);res=res1;} 
   if (where==">"){const res1 = res.filter (country => country.age>p_age);res=res1;} 
   if (where=="<"){const res1 = res.filter (country => country.age<p_age);res=res1;} 
   if (where==">="){const res1 = res.filter (country => country.age>=p_age);res=res1;} 
   if (where=="<="){const res1 = res.filter (country => country.age<=p_age);res=res1;} 
   return (res.length/ar.length*100);
}
*/


function task7() {
  var ar, box, txt, i, res, box1, txt1, _i4, _res, box2, txt2, _i5, _res2;

  return regeneratorRuntime.async(function task7$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          //await piechat();
          ar = result;
          box = document.getElementById("gallery");
          txt = '';

          for (i = 0; i < ar.length; i++) {
            res = ar[i];
            txt += '<div class="teacher">';
            txt += '<a href="#compact-card-popup' + i + '">';
            txt += ' <div class="img"><img src="' + res.picture_large + '" alt=" Фото викладача "  width=200 height=200>';
            txt += '</div>';
            txt += '</a>';
            txt += '<h2>' + res.full_name + '</h2>';
            txt += '<label>' + res.course + '</label>';
            txt += '<label>' + res.country + '</label>';
            txt += '</div>';
            txt += '<div id="compact-card-popup' + i + '" class="modal">';
            txt += '    <div class="content">';
            txt += '        <header> ';
            txt += '           <h2>Compact card</h2>';
            txt += '            <a href="#" class="box-close">x</a>';
            txt += '        </header>';
            txt += '        <form>';
            txt += '            <figure>';
            txt += '                <img src="' + res.picture_large + '"/>';
            txt += '                <figcaption>';
            txt += '                    <output name="full-name-out">' + res.full_name + '</output>';
            txt += '                </figcaption>';
            txt += '            </figure>';
            txt += '            <a class="button" href="#full-card-popup' + i + '">';
            txt += '                Open full card';
            txt += '            </a>';
            txt += '        </form>';
            txt += '    </div>';
            txt += '</div>';
            txt += '<div id="full-card-popup' + i + '" class="modal">';
            txt += ' <div class="content">';
            txt += '     <header>';
            txt += '         <h2>Full card</h2>';
            txt += '         <a href="#" class="box-close">x</a>';
            txt += '     </header>';
            txt += '     <form>';
            txt += '         <section>';
            txt += '             <label>Full name</label>';
            txt += '             <output>' + res.full_name + '</output>';
            txt += '         </section>';
            txt += '         <section>';
            txt += '             <label>Sex</label>';
            txt += '             <output>' + res.gender + '</output>';
            txt += '         </section>';
            txt += '         <div id="datecontact">';
            txt += '         <section>';
            txt += '             <label>Date of birth</label>';
            txt += '             <output>' + res.b_date + '</output>';
            txt += '         </section>';
            txt += '         <section>';
            txt += '             <label>Day to Birthday</label>';
            txt += '             <output>' + dayforbirthday(res.b_date) + '</output>';
            txt += '         </section>';
            txt += '         </div>';
            txt += '         <div id="contact">';
            txt += '             <section>';
            txt += '                 <label>e-mail</label>';
            txt += '                 <output>' + res.email + '</output>';
            txt += '             </section>';
            txt += '             <section>';
            txt += '                 <label>Telephone</label>';
            txt += '                 <output>' + res.phone + '</output>';
            txt += '             </section>';
            txt += '         </div>';
            txt += '         <div id="location">';
            txt += '            <section>';
            txt += '                 <label>Country</label>';
            txt += '                 <output>' + res.country + '</output>';
            txt += '             </section>';
            txt += '             <section>';
            txt += '                <label>City</label>';
            txt += '                 <output>' + res.city + '</output>';
            txt += '             </section>';
            txt += '        </div>';
            txt += '         <section>';
            txt += '             <label>Comment</label>';
            txt += '             <output>' + res.note + '</output>';
            txt += '         </section>';
            /*
                txt+='         <section>'
                txt+='             <label>Location</label>'
                txt+='             <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d325518.68783443136!2d30.252510061496128!3d50.401699044222795!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40d4cf4ee15a4505%3A0x764931d2170146fe!2z0JrQuNC10LIsINCj0LrRgNCw0LjQvdCwLCAwMjAwMA!5e0!3m2!1sru!2snl!4v1679307881581!5m2!1sru!2snl" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>'
                txt+='         </section>'
            */

            txt += '         <section>';
            txt += '<button onclick="window.open(\'table6.html?par1=' + res.coordinates.latitude + '&par2=' + res.coordinates.longitude + '\', \'_blank\',\'top=100, left=100, width=600, height=400\');">Нарисовать карту!</button>';
            /*  txt+='<div id = "#map_'+i+'#" style = "width:200px; height:200px"></div>'
             txt+='<script>'
             //  txt+='function CreateMap_'+i+'(){';
                 // Creating map options
               txt+='var mapOptions = {'
                txt+='center: [17.385044, 78.486671],'
                txt+='zoom: 10'
               txt+='};'
                 // Creating a map object
               txt+="var map = new L.map('#map_"+i+"#', mapOptions);"
                 
                 // Creating a Layer object
              txt+="var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');"
                 
                 // Adding layer to the map
              txt+='map.addLayer(layer);'
                 
                 // Creating a marker
              txt+='var marker = L.marker([17.385044, 78.486671]);'
                 
                 // Adding marker to the map
               txt+='marker.addTo(map);'
            //txt+='}'
             txt+='</script>'
            */

            txt += '         </section>';
            txt += '     </form>';
            txt += ' </div>';
            txt += '</div>';
          }

          box.innerHTML = txt;
          /*
          var box3 = document.getElementById("compact-card-popup"); 
          
             let txt3='';
             for(let i = 0; i < ar.length ; i ++)
             {   
              let res=ar[i];
              txt3+='<div id="compact-card-popup'+i+'" class="modal">';
              txt3+='    <div class="content">';
              txt3+='        <header> ';
              txt3+='           <h2>Compact card</h2>';
              txt3+='            <a href="#" class="box-close">x</a>';
              txt3+='        </header>';
              txt3+='        <form>';
              txt3+='            <figure>';
              txt3+='                <img src="'+res.picture_large+'"/>'
              txt3+='                <figcaption>'
              txt3+='                    <output name="full-name-out">'+res.full_name+'</output>'
              txt3+='                </figcaption>'
              txt3+='            </figure>'
              txt3+='            <a class="button" href="#full-card-popup"'+i+'>';
              txt3+='                Open full card';
              txt3+='            </a>';
              txt3+='        </form>';
              txt3+='    </div>';
              txt3+='</div>';
             }
          box3.innerHTML = txt3;
          */
          //var box1 = document.getElementById("statistics"); 

          box1 = document.getElementById("grid"); //let txt1='<h1>Statistics</h1>'
          //txt1+='<table id="grid" border=1>'

          txt1 = '<tr>';
          txt1 += '<th>Name</th>';
          txt1 += '<th>Speciality</th>';
          txt1 += '<th>Age</th>';
          txt1 += '<th>Sex</th>';
          txt1 += '<th>Nationality</th>';
          txt1 += '</tr>';
          txt1 += '<tbody>';

          for (_i4 = 0; _i4 < ar.length; _i4++) {
            _res = ar[_i4];
            txt1 += '<tr>';
            txt1 += '<td>' + _res.full_name + '</td>';
            txt1 += '<td>' + _res.course + '</td>';
            txt1 += '<td>' + _res.age + '</td>';
            txt1 += '<td>' + _res.gender + '</td>';
            txt1 += '<td>' + _res.country + '</td>';
            txt1 += '</tr>';
          }

          txt1 += '</tbody>'; //txt1+='</table>'

          txt1 += '<div>';
          txt1 += '   <h1>Кількість по країнам</h1>';
          txt1 += '  <canvas id="grafica"></canvas>';
          txt1 += '<script  type = "module" >';
          txt1 += 'import "https://cdn.jsdelivr.net/npm/chart.js@latest/dist/Chart.min.js"';
          txt1 += "import {piechat} from  './6.js';";
          txt1 += 'piechat();';
          txt1 += '</script>';
          txt1 += '</div>';
          box1.innerHTML = txt1;
          box2 = document.getElementById("slider");
          txt2 = '<div class="container">';
          txt2 += '<a id="prev" class="slide-btn">&#10094;</a>';
          txt2 += '<div class="items-container">';

          for (_i5 = 0; _i5 < ar.length; _i5++) {
            _res2 = ar[_i5];
            txt2 += '<div class="teacher" class="entry">';
            txt2 += '<a href="#compact-card-popup' + _i5 + '">'; //txt2+='<a href="#compact-card-popup">'

            txt2 += '<div class="img"><img src="' + _res2.picture_thumbnail + '" alt=" Фото викладача "  width=200 height=200>';
            txt2 += '</div>';
            txt2 += '</a>';
            txt2 += '<h2>' + _res2.full_name + '</h2>';
            txt2 += '<label>' + _res2.country + '</label>';
            txt2 += '</div>';
          }

          txt2 += '</div>';
          txt2 += '<a id="next" class="slide-btn">&#10095;</a>';
          txt2 += '</div>';
          box2.innerHTML = txt2;

        case 35:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function task8() {
  result = resarray.slice();
  ; //.slice();

  var x = document.getElementById("age").selectedIndex;
  var res = result;

  if (x == "1") {
    var res1 = _.filter(res, function (country) {
      return country.age >= 18 && country.age <= 31;
    });

    result = res1;
  }

  if (x == "2") {
    var _res3 = res.filter(function (country) {
      return country.age >= 32 && country.age <= 58;
    });

    result = _res3;
  }

  if (x == "3") {
    var _res4 = res.filter(function (country) {
      return country.age >= 59 && country.age <= 75;
    });

    result = _res4;
  }

  var z = document.getElementById("region").selectedIndex;
  res = result;

  if (z == "1") {
    var _res5 = res.filter(function (country) {
      return country.country == "Україна";
    });

    result = _res5;
  }

  if (z == "2") {
    var _res6 = res.filter(function (country) {
      return country.country == "Germany";
    });

    result = _res6;
  }

  if (z == "3") {
    var _res7 = res.filter(function (country) {
      return country.country == "Norway";
    });

    result = _res7;
  }

  res = result;
  var y = document.getElementById("sex").selectedIndex;

  if (y == "1") {
    var _res8 = res.filter(function (country) {
      return country.gender == "male";
    });

    result = _res8;
  }

  if (y == "2") {
    var _res9 = res.filter(function (country) {
      return country.gender == "female";
    });

    result = _res9;
  }

  if (document.getElementById("photo").checked == true) {
    res = result;

    var _res10 = res.filter(function (country) {
      return (
        /*country.picture_thumbnail.length!=0 */
        country.picture_thumbnail != undefined && country.picture_thumbnail != null
      );
    });

    result = _res10;
  }

  if (document.getElementById("favourite").checked == true) {
    res = result;

    var _res11 = res.filter(function (country) {
      return country.favorite != undefined && country.favorite != null && country.favorite == true;
    });

    result = _res11;
  }
}

;

function start() {
  return regeneratorRuntime.async(function start$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(task1(50));

        case 2:
          task2();
          task8();
          _context3.next = 6;
          return regeneratorRuntime.awrap(task7());

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function next() {
  task8();
  task7();
}

function add(name, specialization, email, tel, region, city, sex, date, color, comment) {
  var b = {};
  b.gender = sex;
  b.full_name = name;
  b.city = city; //b.state=a.location.state;

  if (region = "ua") {
    b.country = "Україна";
  } else if (region = "cz") {
    b.country = "Česká Republika";
  } else {
    b.country = "United Kingdom";
  }

  b.email = email;
  b.b_date = date; //b.age=a.dob.age;

  b.phone = tel;
  b.favorite = true;
  b.course = specialization; //course();

  b.bg_color = color;
  b.note = comment;
  resarray.push(b);
}

function onbuttonadd() {
  return regeneratorRuntime.async(function onbuttonadd$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(task1(10));

        case 2:
          task2();

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
}

function piechat() {
  var $grafica, result1, ar, mytags, mydata, mybackgroundColor, myborderColor, new_country, counts, i, res, val, _i6, r, g, b, a1, a2, mydataTraffic, tags, dataTraffic;

  return regeneratorRuntime.async(function piechat$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          // Получение ссылки на элемент canvas в DOM
          $grafica = document.querySelector("#grafica"); // Tags - участки графика

          result1 = [{
            country: "Germany"
          }, {
            country: "Germany"
          }, {
            country: "Poland"
          }, {
            country: "Germany"
          }, {
            country: "Ukraine"
          }, {
            country: "Britain"
          }];
          ar = result;

          if (ar != null && ar != undefined && ar.length > 0) {
            /*ar.sort((a, b) => {
               let fa = a.country.toLowerCase(),
                   fb = b.country.toLowerCase();
            
               if (fa < fb) {
                   return -1;
               }
               if (fa > fb) {
                   return 1;
               }
               return 0;
            });*/
            ar = _.sortBy(ar, "country");
            mytags = [];
            mydata = [];
            mybackgroundColor = [];
            myborderColor = [];
            new_country = ar[0].country;
            counts = 1;

            for (i = 1; i < ar.length; i++) {
              res = ar[i];

              if (res.country == new_country) {
                counts++;
              } else {
                mytags.push(new_country);
                mydata.push(counts);
                new_country = res.country;
                counts = 1;
              }
            }

            mytags.push(new_country);
            mydata.push(counts);
            val = 255 / mytags.length;

            for (_i6 = 0; _i6 < mytags.length; _i6++) {
              r = _.random(0, mytags.length);
              g = _.random(0, mytags.length);
              b = _.random(0, mytags.length);
              a1 = 'rgba(' + val * r + ',' + val * g + ',' + val * b + ',0.2)';
              mybackgroundColor.push(a1);
              a2 = 'rgba(' + val * r + ',' + val * g + ',' + val * b + ',1)';
              myborderColor.push(a2);
            }

            mydataTraffic = {
              data: mydata,
              backgroundColor: mybackgroundColor,
              borderColor: myborderColor,
              borderWidth: 1
            };
            new Chart($grafica, {
              type: 'pie',
              // Тип графики. Может быть dougnhut  или pie
              data: {
                labels: mytags,
                datasets: [mydataTraffic // Больше данных
                ]
              }
            });
          } else {
            tags = ["Нема даних"];
            dataTraffic = {
              data: [0],
              // Данные представляют собой массив, который должен иметь такое же количество значений, как и количество тегов.
              // Теперь цветов фона должно быть столько, сколько данных, т.е. для данного примера 4.
              backgroundColor: ['rgba(163,221,203,0.2)'],
              // Цвет фона
              borderColor: ['rgba(163,221,203,1)'],
              // Цвет границы
              borderWidth: 1 // Толщина границ

            };
            new Chart($grafica, {
              type: 'pie',
              // Тип графики. Может быть dougnhut  или pie
              data: {
                labels: tags,
                datasets: [dataTraffic // Больше данных
                ]
              }
            });
          }

          ;

        case 5:
        case "end":
          return _context5.stop();
      }
    }
  });
}

function dayforbirthday(dn) {
  var now = dayjs();
  var date1 = dayjs(dn);
  var d1 = now.diff(date1, 'year');
  var date2 = date1.add(d1, 'year');

  if (now.diff(date1, 'day') > 0) {
    date2 = date1.add(d1 + 1, 'year');
  }

  return Math.floor(date2.diff(now, 'day'));
}
//# sourceMappingURL=6.dev.js.map
